/*
 * generated by Xtext 2.28.0
 */
package game.of.life.tasks.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import game.of.life.tasks.ide.contentassist.antlr.internal.InternalTASKDSLParser;
import game.of.life.tasks.services.TASKDSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TASKDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TASKDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TASKDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLogicalRelationAccess().getAlternatives(), "rule__LogicalRelation__Alternatives");
			builder.put(grammarAccess.getStatusAccess().getAlternatives(), "rule__Status__Alternatives");
			builder.put(grammarAccess.getResultAccess().getAlternatives(), "rule__Result__Alternatives");
			builder.put(grammarAccess.getGameAccess().getGroup(), "rule__Game__Group__0");
			builder.put(grammarAccess.getGridSizeAccess().getGroup(), "rule__GridSize__Group__0");
			builder.put(grammarAccess.getStartGridAccess().getGroup(), "rule__StartGrid__Group__0");
			builder.put(grammarAccess.getCellAccess().getGroup(), "rule__Cell__Group__0");
			builder.put(grammarAccess.getEvolutionRulesAccess().getGroup(), "rule__EvolutionRules__Group__0");
			builder.put(grammarAccess.getGameAccess().getNameAssignment_1(), "rule__Game__NameAssignment_1");
			builder.put(grammarAccess.getGameAccess().getGridSizeAssignment_3(), "rule__Game__GridSizeAssignment_3");
			builder.put(grammarAccess.getGameAccess().getEvolutionRulesAssignment_5(), "rule__Game__EvolutionRulesAssignment_5");
			builder.put(grammarAccess.getGameAccess().getStartGridAssignment_7(), "rule__Game__StartGridAssignment_7");
			builder.put(grammarAccess.getGameAccess().getAllCellsAssignment_9(), "rule__Game__AllCellsAssignment_9");
			builder.put(grammarAccess.getGridSizeAccess().getHAssignment_1(), "rule__GridSize__HAssignment_1");
			builder.put(grammarAccess.getGridSizeAccess().getLAssignment_3(), "rule__GridSize__LAssignment_3");
			builder.put(grammarAccess.getStartGridAccess().getXCAssignment_2(), "rule__StartGrid__XCAssignment_2");
			builder.put(grammarAccess.getStartGridAccess().getYCAssignment_4(), "rule__StartGrid__YCAssignment_4");
			builder.put(grammarAccess.getStartGridAccess().getSAssignment_6(), "rule__StartGrid__SAssignment_6");
			builder.put(grammarAccess.getCellAccess().getXCAssignment_2(), "rule__Cell__XCAssignment_2");
			builder.put(grammarAccess.getCellAccess().getYCAssignment_4(), "rule__Cell__YCAssignment_4");
			builder.put(grammarAccess.getCellAccess().getSAssignment_6(), "rule__Cell__SAssignment_6");
			builder.put(grammarAccess.getEvolutionRulesAccess().getNNoAssignment_2(), "rule__EvolutionRules__NNoAssignment_2");
			builder.put(grammarAccess.getEvolutionRulesAccess().getLAssignment_3(), "rule__EvolutionRules__LAssignment_3");
			builder.put(grammarAccess.getEvolutionRulesAccess().getComparedNoAssignment_4(), "rule__EvolutionRules__ComparedNoAssignment_4");
			builder.put(grammarAccess.getEvolutionRulesAccess().getSAssignment_7(), "rule__EvolutionRules__SAssignment_7");
			builder.put(grammarAccess.getEvolutionRulesAccess().getResultAssignment_9(), "rule__EvolutionRules__ResultAssignment_9");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TASKDSLGrammarAccess grammarAccess;

	@Override
	protected InternalTASKDSLParser createParser() {
		InternalTASKDSLParser result = new InternalTASKDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TASKDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TASKDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
