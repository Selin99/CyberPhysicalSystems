/*
 * generated by Xtext 2.28.0
 */
package game.of.life.tasks.validation;

import game.of.life.tasks.tASKDSL.TASKDSLPackage
import org.eclipse.xtext.validation.Check;
import game.of.life.tasks.tASKDSL.Game

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class TASKDSLValidator extends AbstractTASKDSLValidator {
	
	@Check 
	def checkStartGridCoordinates(Game g) //Check if start coordinates are within the grid
	{ 
	    var gs = g.gridSize;
	    var sg =g.startGrid ;
	    for(var i=0; i<sg.size;i++)
	    {
		    var height = gs.get(0).h; //grid size is set in the begining of game and it stays fixed for that game
		    var length = gs.get(0).l;
		    
		    if((sg.get(i).getXC())>=height || (sg.get(i).getXC())<0)
		    	{
		    		error("X axis out of grid",null);	
		    	}
		    if((sg.get(i).getYC())>=length || (sg.get(i).getYC())<0)
		    	{
		    		error("Y axis out of grid",null);
		    	}
	    
	    } 
	}
	//GridSize must be greater than minimum grid size defined inside the GameOfLife.java file (which is 400x400).
	@Check
	def checkMinGridSize(Game g)
	{
		 var gs = g.gridSize;
		 for(var i=0; i<gs.size;i++)
	    {
		    var height = gs.get(0).h; //grid size is set in the begining of game and it stays fixed for that game
		    var length = gs.get(0).l;
		    
		    if(height<400)
		    	{
		    		error("Height is below minimum grid height!!",null);	
		    	}
		    if(length<400)
		    	{
		    		error("Length is below minimum grid length!!",null);
		    	}
	    
	    } 
	}
	
	@Check 
	def checkDoubleCoordinates(Game g)
	{ 
	//Do not allow 2 different specifications for the same coordinate for an instance of the game
	//Ex: Cell (0,0) both live and dead at the same time ? Error
	    var clist = g.startGrid 
	    for (var i= 0; i < clist.size ; i++)
	    { 
	      for (var j = i+1; j < clist.size ; j++)
	      { 
	        if ((clist.get(i).getXC().equals(clist.get(j).getXC())) && (clist.get(i).getYC().equals(clist.get(j).getYC())))
	         { 
	            error("Duplicated Coordinate!!",null) 
	         } 
	      } 
	    } 
  	} 
  	
  	//total number of cells defined in dsl should not exceed the total gridsize=heightxlength
  	
  	def checkIfCoordinateValuesPositive(Game g)
  	{
  		//According to the swing package all coordinates should contain only positive values.
	    var iaclist = g.startGrid
	    for (var i= 0; i < iaclist.size ; i++)
	    { 
	        if ((iaclist.get(i).getXC()<0) || (iaclist.get(i).getYC()<0))
	         { 
	            error("Negative Coordinate Not Allowed!!",null) 
	         } 
	       
	    } 
  	}
  	
	def checkEvolutionRulesForCells(Game g)
	{
		var evRules = g.evolutionRules
		for(var i=0;i<evRules.size;i++)
		{
			if(evRules.get(i).getNNo<0)
			{
				//A cell can not have negative neighborNo:
				error("A cell can not have negative neighbor number. Invalid Rule!!",null);
			}
			
			if(evRules.get(i).getNNo>8)
			{
				//A cell can not have more than 8 neighborNo:
				error("A cell can not have more than 8 neighbors. Invalid Rule!!",null);
			}
		}		
	}
	
	def checkDuplicateRule(Game g)
	{
		//Do not allow 2 different evolution rules for the same boolean expression with different results!!
		//Ex: neighborNo>5 and status=live -> Birth   neighborNo>5 and status=live -> Dead ?? Unambigous=Error
		
		//Allow 2 the repetition of evolution rules if the result is also same but raise a warning to inform the user.
		//ex: neighborNo>5 and status=live -> Birth   neighborNo>5 and status=live -> Birth ?? Not Unambigous=warning
		
	   var evRules = g.evolutionRules
	    for (var i= 0; i < evRules.size ; i++)
	    { 
	      for (var j = i+1; j < evRules.size ; j++)
	      { 
	        if ((evRules.get(i).getNNo().equals(evRules.get(j).getNNo())) && (evRules.get(i).getL().equals(evRules.get(j).getL()))&& (evRules.get(i).getComparedNo().equals(evRules.get(j).getComparedNo())))
	         {
	         	if(evRules.get(i).getResult().equals(evRules.get(j).getResult())) 
	            {
	            	warning("Same Rule replied!!",null); 
	            }
	            else
	            {
	            	error("Unambogous Rule!!",null);
	            }
	            	
	         } 
	      } 
	    } 	
	}
}

