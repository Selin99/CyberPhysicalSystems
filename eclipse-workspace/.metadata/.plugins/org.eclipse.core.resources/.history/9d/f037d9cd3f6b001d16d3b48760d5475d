package game.of.life.tasks.generator


import game.of.life.tasks.tASKDSL.Game

class RulesOfLife {
	def static rulesOfLife (Game Root)
		'''
			package GameOfLife;
		
			import java.awt.Point;
			import java.util.ArrayList;
		
			public class RulesOfLife {
				public static void computeSurvivors(boolean[][] gameBoard, ArrayList<Point> survivingCells) {
		        	// Iterate through the array, follow game of life rules
		       	 for (int i=1; i<gameBoard.length-1; i++) {
		            for (int j=1; j<gameBoard[0].length-1; j++) {
		                int surrounding = 0;
		                if (gameBoard[i-1][j-1]) { surrounding++; }
		                if (gameBoard[i-1][j])   { surrounding++; }
		                if (gameBoard[i-1][j+1]) { surrounding++; }
		                if (gameBoard[i][j-1])   { surrounding++; }
		                if (gameBoard[i][j+1])   { surrounding++; }
		                if (gameBoard[i+1][j-1]) { surrounding++; }
		                if (gameBoard[i+1][j])   { surrounding++; }
		                if (gameBoard[i+1][j+1]) { surrounding++; }
		               
		               	boolean current_cell_lives = gameBoard[i][j];
		                «FOR evRule: Root.evolutionRules»
		                	if (surrounding «convertComparison(evRule.comparison)» «evRule.number») {
			                	«IF evRule.result == RuleResult::SPAWNS»
			                		if (!current_cell_lives) { 
		                				survivingCells.add(new Point(i-1,j-1));
		                			}
			                	«ENDIF»
			                	«IF evRule.result == RuleResult::LIVES»
				                	if (current_cell_lives) { 
				                		survivingCells.add(new Point(i-1,j-1));
			                		}		                	
			                	«ENDIF»
		                	}
		                «ENDFOR»
		            }
		        }
			}
		
		}
	'''
		var aliveCells=Root.startGrid;
		for(var i=0;i<aliveCells.size();i++)
		{
			var x=aliveCells.get(i).getXC();
			var y=aliveCells.get(i).getYC();
			
		}
		
		
	}
	

}

