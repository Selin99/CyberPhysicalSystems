/*
 * generated by Xtext 2.28.0
 */
package game.of.life.tasks.validation;

import game.of.life.tasks.tASKDSL.TASKDSLPackage
import org.eclipse.xtext.validation.Check;
import game.of.life.tasks.tASKDSL.GridSize;
import game.of.life.tasks.tASKDSL.StartGrid
import game.of.life.tasks.tASKDSL.Cell
import java.util.List
import game.of.life.tasks.tASKDSL.Game

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class TASKDSLValidator extends AbstractTASKDSLValidator {
	

//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					TASKDSLPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
	@Check 
	def checkStartGridCoordinates(Game g) 
	{ 
	    var gs = g.gridSize;
	    
	    for(var i=0; i<gs.size;i++)
	    {
	    	
	    }
	    var height = gridSize.getH();
	    var length = gs.getL();
	    
	    var sglist = sg ;
	    for(var i=0; i<sglist.size;i++)
	    {
	    	if((sg.get(i).getXC())>height || (sg.get(i).getXC())<0)
	    	{
	    		error("X axis out of grid",TASKDSLPackage.Literals.START_GRİD__XC);
	    		
	    	}
	    	if((sg.get(i).getYC())>length || (sg.get(i).getYC())<0)
	    	{
	    		error("Y axis out of grid",TASKDSLPackage.Literals.START_GRİD__YC);
	    		
	    	}

	    }
	}
	
	
	@Check 
	def checkCellCoordinates(GridSize gs, List <Cell> c) 
	{ 
	    var height = gs.getH();
	    var length = gs.getL();
	    
	    var clist = c; 
	    for(var i=0; i<clist.size;i++)
	    {
	    	if((c.get(i).getX())>height || ((c.get(i).getX())<0))
	    	{
	    		error("X axis out of grid",null);
	    	}
	    	if(( c.get(i).getY())>length || ((c.get(i).getY())<0))
	    	{
	    		error("Y axis out of grid",null);
	    	}
	    }
	}
	
	@Check 
	def checkCellStatus(List <Cell> c) 
	{ 

	    var clist = c; 
	    for(var i=0; i<clist.size;i++)
	    {
	    	//Cell Status=0 -> Cell is dead
	    	//Cell Status=1 -> Cell is live
	    	if (((c.get(i).getNNo())==3) && (( c.get(i).getS())==0) )  
	    	{
	    		//If Cell is dead and Neighbour No is exactly 3 -> Cell must birth
	    		if((c.get(i).getAvAction().getBirth())!=1)
	    		{
		    		error("Item's next available action is birth!",null);
	    		}
	    		if(( c.get(i).getAvAction().getOvercrowd())==1)
	    		{
		    		error("Death by Overcrowing is not available for this item ! Try changing to birth!",null);
	    		}
	    		if((c.get(i).getAvAction().getSur())==1)
	    		{
		    		error("Survival is not available for this item ! Try changing to birth!",null);
	    		}
	    		if((c.get(i).getAvAction().getXiso())==1)
	    		{
		    		error("Death by Isolation is not available for this item ! Try changing to birth!",null);
	    		}
	    	}
	    	
	    	if(((c.get(i).getNNo())<1) && ((c.get(i).getS())==1)) 
	    	{
	    		//If Cell is live and Neighbour No <1 ->  Cell must die because of isolation
	    		if(( c.get(i).getAvAction().getXiso())!=1)
	    		{
		    		error("Item's next available action is death by isolation!",null);
	    		}
	    		if((c.get(i).getAvAction().getOvercrowd())==1)
	    		{
		    		error("Death by Overcrowing is not available for this item ! Try changing to death by isolation!",null);
	    		}
	    		if((c.get(i).getAvAction().getSur())==1)
	    		{
		    		error("Survival is not available for this item ! Try changing to death by isolation!",null);
	    		}
	    		if(( c.get(i).getAvAction().getBirth())==1)
	    		{
		    		error("Birth is not available for this item ! Try changing to death by isolation!",null);
	    		}
	    	}
	    	
	    	if(((c.get(i).getNNo())>4) && (( c.get(i).getS())==1)) 
	    	{
	    		//If Cell is live and Neighbour No >4 -> Cell must die because of overcrowding
	    		if((c.get(i).getAvAction().getOvercrowd())!=1)
	    		{
		    		error("Item's next available action is death by overcrowding!",null);
	    		}
	    		if((c.get(i).getAvAction().getXiso())==1)
	    		{
		    		error("Death by isolation is not available for this item ! Try changing to death by overcrowding!",null);
	    		}
	    		if((c.get(i).getAvAction().getSur())==1)
	    		{
		    		error("Survival is not available for this item ! Try changing to death by overcrowding!",null);
	    		}
	    		if((c.get(i).getAvAction().getBirth())==1)
	    		{
		    		error("Birth is not available for this item ! Try changing to death by overcrowding!",null);
	    		}
	    	}
	    	if(((c.get(i).getNNo())==2) || (( c.get(i).getNNo())==3) && ((c.get(i).getS())==1)) 
	    	{
	    		//If Cell is live and Neighbour No ==2 or Neighbour No==3 -> Cell must survive
	    		if((c.get(i).getAvAction().getSur())!=1)
	    		{
		    		error("Item's next available action is survival!",null);
	    		}
	    		if((c.get(i).getAvAction().getXiso())==1)
	    		{
		    		error("Death by isolation is not available for this item ! Try changing to survival!",null);
	    		}
	    		if((c.get(i).getAvAction().getOvercrowd())==1)
	    		{
		    		error("Death by overcrowding is not available for this item ! Try changing to survival!",null);
	    		}
	    		if((c.get(i).getAvAction().getBirth())==1)
	    		{
		    		error("Birth is not available for this item ! Try changing to survival!",null);
	    		}
	    	}
	    	
	    }
	}
}

