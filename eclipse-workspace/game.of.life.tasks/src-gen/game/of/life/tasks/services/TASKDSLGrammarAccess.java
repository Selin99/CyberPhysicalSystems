/*
 * generated by Xtext 2.28.0
 */
package game.of.life.tasks.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TASKDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "game.of.life.tasks.TASKDSL.Model");
		private final RuleCall cGameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//    Game ;
		@Override public ParserRule getRule() { return rule; }
		
		//Game
		public RuleCall getGameParserRuleCall() { return cGameParserRuleCall; }
	}
	public class GameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "game.of.life.tasks.TASKDSL.Game");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cGameStatusAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGameStatusGameStatusParserRuleCall_2_0 = (RuleCall)cGameStatusAssignment_2.eContents().get(0);
		private final Assignment cGridSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGridSizeGridSizeParserRuleCall_3_0 = (RuleCall)cGridSizeAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cStartGridAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cStartGridStartGridParserRuleCall_4_0_0 = (RuleCall)cStartGridAssignment_4_0.eContents().get(0);
		private final Assignment cAllCellsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cAllCellsCellParserRuleCall_4_1_0 = (RuleCall)cAllCellsAssignment_4_1.eContents().get(0);
		
		//Game: 'Game:' name=ID gameStatus+= GameStatus gridSize+=GridSize (startGrid+=StartGrid | allCells+=Cell)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Game:' name=ID gameStatus+= GameStatus gridSize+=GridSize (startGrid+=StartGrid | allCells+=Cell)*
		public Group getGroup() { return cGroup; }
		
		//'Game:'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//gameStatus+= GameStatus
		public Assignment getGameStatusAssignment_2() { return cGameStatusAssignment_2; }
		
		//GameStatus
		public RuleCall getGameStatusGameStatusParserRuleCall_2_0() { return cGameStatusGameStatusParserRuleCall_2_0; }
		
		//gridSize+=GridSize
		public Assignment getGridSizeAssignment_3() { return cGridSizeAssignment_3; }
		
		//GridSize
		public RuleCall getGridSizeGridSizeParserRuleCall_3_0() { return cGridSizeGridSizeParserRuleCall_3_0; }
		
		//(startGrid+=StartGrid | allCells+=Cell)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//startGrid+=StartGrid
		public Assignment getStartGridAssignment_4_0() { return cStartGridAssignment_4_0; }
		
		//StartGrid
		public RuleCall getStartGridStartGridParserRuleCall_4_0_0() { return cStartGridStartGridParserRuleCall_4_0_0; }
		
		//allCells+=Cell
		public Assignment getAllCellsAssignment_4_1() { return cAllCellsAssignment_4_1; }
		
		//Cell
		public RuleCall getAllCellsCellParserRuleCall_4_1_0() { return cAllCellsCellParserRuleCall_4_1_0; }
	}
	public class GridSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "game.of.life.tasks.TASKDSL.GridSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHINTTerminalRuleCall_1_0 = (RuleCall)cHAssignment_1.eContents().get(0);
		private final Keyword cLengthKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLINTTerminalRuleCall_3_0 = (RuleCall)cLAssignment_3.eContents().get(0);
		
		//GridSize: 'Height:' h=INT 'Length:' l=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Height:' h=INT 'Length:' l=INT
		public Group getGroup() { return cGroup; }
		
		//'Height:'
		public Keyword getHeightKeyword_0() { return cHeightKeyword_0; }
		
		//h=INT
		public Assignment getHAssignment_1() { return cHAssignment_1; }
		
		//INT
		public RuleCall getHINTTerminalRuleCall_1_0() { return cHINTTerminalRuleCall_1_0; }
		
		//'Length:'
		public Keyword getLengthKeyword_2() { return cLengthKeyword_2; }
		
		//l=INT
		public Assignment getLAssignment_3() { return cLAssignment_3; }
		
		//INT
		public RuleCall getLINTTerminalRuleCall_3_0() { return cLINTTerminalRuleCall_3_0; }
	}
	public class GameStatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "game.of.life.tasks.TASKDSL.GameStatus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameStatusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGsINTTerminalRuleCall_1_0 = (RuleCall)cGsAssignment_1.eContents().get(0);
		
		//GameStatus: 'GameStatus:' gs=INT ;
		@Override public ParserRule getRule() { return rule; }
		
		//'GameStatus:' gs=INT
		public Group getGroup() { return cGroup; }
		
		//'GameStatus:'
		public Keyword getGameStatusKeyword_0() { return cGameStatusKeyword_0; }
		
		//gs=INT
		public Assignment getGsAssignment_1() { return cGsAssignment_1; }
		
		//INT
		public RuleCall getGsINTTerminalRuleCall_1_0() { return cGsINTTerminalRuleCall_1_0; }
	}
	public class StartGridElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "game.of.life.tasks.TASKDSL.StartGrid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitiallyActiveCellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cXCoordKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXCAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXCINTTerminalRuleCall_2_0 = (RuleCall)cXCAssignment_2.eContents().get(0);
		private final Keyword cYCoordKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYCAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYCINTTerminalRuleCall_4_0 = (RuleCall)cYCAssignment_4.eContents().get(0);
		
		// //if 1 game continue if 0 game over
		//StartGrid: 'InitiallyActiveCell:' 'x-Coord:' xC= INT  'y-Coord:' yC= INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'InitiallyActiveCell:' 'x-Coord:' xC= INT  'y-Coord:' yC= INT
		public Group getGroup() { return cGroup; }
		
		//'InitiallyActiveCell:'
		public Keyword getInitiallyActiveCellKeyword_0() { return cInitiallyActiveCellKeyword_0; }
		
		//'x-Coord:'
		public Keyword getXCoordKeyword_1() { return cXCoordKeyword_1; }
		
		//xC= INT
		public Assignment getXCAssignment_2() { return cXCAssignment_2; }
		
		//INT
		public RuleCall getXCINTTerminalRuleCall_2_0() { return cXCINTTerminalRuleCall_2_0; }
		
		//'y-Coord:'
		public Keyword getYCoordKeyword_3() { return cYCoordKeyword_3; }
		
		//yC= INT
		public Assignment getYCAssignment_4() { return cYCAssignment_4; }
		
		//INT
		public RuleCall getYCINTTerminalRuleCall_4_0() { return cYCINTTerminalRuleCall_4_0; }
	}
	public class AvActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "game.of.life.tasks.TASKDSL.avAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBirthKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cBirthAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBirthINTTerminalRuleCall_0_1_0 = (RuleCall)cBirthAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOvercrowdingKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOvercrowdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOvercrowdINTTerminalRuleCall_1_1_0 = (RuleCall)cOvercrowdAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cXisolationKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cXisoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cXisoINTTerminalRuleCall_2_1_0 = (RuleCall)cXisoAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cSurvivalKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSurAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSurINTTerminalRuleCall_3_1_0 = (RuleCall)cSurAssignment_3_1.eContents().get(0);
		
		//avAction: 'Birth' birth=INT | 'Overcrowding' overcrowd=INT | 'Xisolation' xiso=INT | 'Survival' sur=INT ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Birth' birth=INT | 'Overcrowding' overcrowd=INT | 'Xisolation' xiso=INT | 'Survival' sur=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Birth' birth=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'Birth'
		public Keyword getBirthKeyword_0_0() { return cBirthKeyword_0_0; }
		
		//birth=INT
		public Assignment getBirthAssignment_0_1() { return cBirthAssignment_0_1; }
		
		//INT
		public RuleCall getBirthINTTerminalRuleCall_0_1_0() { return cBirthINTTerminalRuleCall_0_1_0; }
		
		//'Overcrowding' overcrowd=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'Overcrowding'
		public Keyword getOvercrowdingKeyword_1_0() { return cOvercrowdingKeyword_1_0; }
		
		//overcrowd=INT
		public Assignment getOvercrowdAssignment_1_1() { return cOvercrowdAssignment_1_1; }
		
		//INT
		public RuleCall getOvercrowdINTTerminalRuleCall_1_1_0() { return cOvercrowdINTTerminalRuleCall_1_1_0; }
		
		//'Xisolation' xiso=INT
		public Group getGroup_2() { return cGroup_2; }
		
		//'Xisolation'
		public Keyword getXisolationKeyword_2_0() { return cXisolationKeyword_2_0; }
		
		//xiso=INT
		public Assignment getXisoAssignment_2_1() { return cXisoAssignment_2_1; }
		
		//INT
		public RuleCall getXisoINTTerminalRuleCall_2_1_0() { return cXisoINTTerminalRuleCall_2_1_0; }
		
		//'Survival' sur=INT
		public Group getGroup_3() { return cGroup_3; }
		
		//'Survival'
		public Keyword getSurvivalKeyword_3_0() { return cSurvivalKeyword_3_0; }
		
		//sur=INT
		public Assignment getSurAssignment_3_1() { return cSurAssignment_3_1; }
		
		//INT
		public RuleCall getSurINTTerminalRuleCall_3_1_0() { return cSurINTTerminalRuleCall_3_1_0; }
	}
	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "game.of.life.tasks.TASKDSL.Cell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cXCoordinateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXINTTerminalRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYCoordinateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYINTTerminalRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cNeighborNoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNNoAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNNoINTTerminalRuleCall_7_0 = (RuleCall)cNNoAssignment_7.eContents().get(0);
		private final Keyword cStatusKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSINTTerminalRuleCall_9_0 = (RuleCall)cSAssignment_9.eContents().get(0);
		private final Keyword cAvailableActionKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAvActionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAvActionAvActionParserRuleCall_11_0 = (RuleCall)cAvActionAssignment_11.eContents().get(0);
		
		//Cell: 'Cell:' name=ID 'x-Coordinate:' x= INT  'y-Coordinate:' y= INT 'neighborNo:' nNo=INT 'status:' s=INT 'availableAction:' avAction=avAction
		////if ressurected 2 alive 1 if dead 0
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Cell:' name=ID 'x-Coordinate:' x= INT  'y-Coordinate:' y= INT 'neighborNo:' nNo=INT 'status:' s=INT 'availableAction:' avAction=avAction
		public Group getGroup() { return cGroup; }
		
		//'Cell:'
		public Keyword getCellKeyword_0() { return cCellKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'x-Coordinate:'
		public Keyword getXCoordinateKeyword_2() { return cXCoordinateKeyword_2; }
		
		//x= INT
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_3_0() { return cXINTTerminalRuleCall_3_0; }
		
		//'y-Coordinate:'
		public Keyword getYCoordinateKeyword_4() { return cYCoordinateKeyword_4; }
		
		//y= INT
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_5_0() { return cYINTTerminalRuleCall_5_0; }
		
		//'neighborNo:'
		public Keyword getNeighborNoKeyword_6() { return cNeighborNoKeyword_6; }
		
		//nNo=INT
		public Assignment getNNoAssignment_7() { return cNNoAssignment_7; }
		
		//INT
		public RuleCall getNNoINTTerminalRuleCall_7_0() { return cNNoINTTerminalRuleCall_7_0; }
		
		//'status:'
		public Keyword getStatusKeyword_8() { return cStatusKeyword_8; }
		
		//s=INT
		public Assignment getSAssignment_9() { return cSAssignment_9; }
		
		//INT
		public RuleCall getSINTTerminalRuleCall_9_0() { return cSINTTerminalRuleCall_9_0; }
		
		//'availableAction:'
		public Keyword getAvailableActionKeyword_10() { return cAvailableActionKeyword_10; }
		
		//avAction=avAction
		public Assignment getAvActionAssignment_11() { return cAvActionAssignment_11; }
		
		//avAction
		public RuleCall getAvActionAvActionParserRuleCall_11_0() { return cAvActionAvActionParserRuleCall_11_0; }
	}
	
	
	private final ModelElements pModel;
	private final GameElements pGame;
	private final GridSizeElements pGridSize;
	private final GameStatusElements pGameStatus;
	private final StartGridElements pStartGrid;
	private final AvActionElements pAvAction;
	private final CellElements pCell;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TASKDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGame = new GameElements();
		this.pGridSize = new GridSizeElements();
		this.pGameStatus = new GameStatusElements();
		this.pStartGrid = new StartGridElements();
		this.pAvAction = new AvActionElements();
		this.pCell = new CellElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("game.of.life.tasks.TASKDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    Game ;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Game: 'Game:' name=ID gameStatus+= GameStatus gridSize+=GridSize (startGrid+=StartGrid | allCells+=Cell)*;
	public GameElements getGameAccess() {
		return pGame;
	}
	
	public ParserRule getGameRule() {
		return getGameAccess().getRule();
	}
	
	//GridSize: 'Height:' h=INT 'Length:' l=INT;
	public GridSizeElements getGridSizeAccess() {
		return pGridSize;
	}
	
	public ParserRule getGridSizeRule() {
		return getGridSizeAccess().getRule();
	}
	
	//GameStatus: 'GameStatus:' gs=INT ;
	public GameStatusElements getGameStatusAccess() {
		return pGameStatus;
	}
	
	public ParserRule getGameStatusRule() {
		return getGameStatusAccess().getRule();
	}
	
	// //if 1 game continue if 0 game over
	//StartGrid: 'InitiallyActiveCell:' 'x-Coord:' xC= INT  'y-Coord:' yC= INT;
	public StartGridElements getStartGridAccess() {
		return pStartGrid;
	}
	
	public ParserRule getStartGridRule() {
		return getStartGridAccess().getRule();
	}
	
	//avAction: 'Birth' birth=INT | 'Overcrowding' overcrowd=INT | 'Xisolation' xiso=INT | 'Survival' sur=INT ;
	public AvActionElements getAvActionAccess() {
		return pAvAction;
	}
	
	public ParserRule getAvActionRule() {
		return getAvActionAccess().getRule();
	}
	
	//Cell: 'Cell:' name=ID 'x-Coordinate:' x= INT  'y-Coordinate:' y= INT 'neighborNo:' nNo=INT 'status:' s=INT 'availableAction:' avAction=avAction
	////if ressurected 2 alive 1 if dead 0
	//;
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
