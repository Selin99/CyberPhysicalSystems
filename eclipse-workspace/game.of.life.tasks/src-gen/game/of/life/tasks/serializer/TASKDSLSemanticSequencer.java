/*
 * generated by Xtext 2.28.0
 */
package game.of.life.tasks.serializer;

import com.google.inject.Inject;
import game.of.life.tasks.services.TASKDSLGrammarAccess;
import game.of.life.tasks.tASKDSL.Cell;
import game.of.life.tasks.tASKDSL.Game;
import game.of.life.tasks.tASKDSL.GridSize;
import game.of.life.tasks.tASKDSL.StartGrid;
import game.of.life.tasks.tASKDSL.TASKDSLPackage;
import game.of.life.tasks.tASKDSL.evolutionRules;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TASKDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TASKDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TASKDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TASKDSLPackage.CELL:
				sequence_Cell(context, (Cell) semanticObject); 
				return; 
			case TASKDSLPackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case TASKDSLPackage.GRİD_SİZE:
				sequence_GridSize(context, (GridSize) semanticObject); 
				return; 
			case TASKDSLPackage.START_GRİD:
				sequence_StartGrid(context, (StartGrid) semanticObject); 
				return; 
			case TASKDSLPackage.EVOLUTİON_RULES:
				sequence_evolutionRules(context, (evolutionRules) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Cell returns Cell
	 *
	 * Constraint:
	 *     (xC=INT yC=INT s=Status)
	 * </pre>
	 */
	protected void sequence_Cell(ISerializationContext context, Cell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.CELL__XC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.CELL__XC));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.CELL__YC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.CELL__YC));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.CELL__S) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.CELL__S));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCellAccess().getXCINTTerminalRuleCall_2_0(), semanticObject.getXC());
		feeder.accept(grammarAccess.getCellAccess().getYCINTTerminalRuleCall_4_0(), semanticObject.getYC());
		feeder.accept(grammarAccess.getCellAccess().getSStatusEnumRuleCall_6_0(), semanticObject.getS());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Game
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (name=ID gridSize+=GridSize evolutionRules+=evolutionRules* startGrid+=StartGrid* allCells+=Cell*)
	 * </pre>
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GridSize returns GridSize
	 *
	 * Constraint:
	 *     (h=INT l=INT)
	 * </pre>
	 */
	protected void sequence_GridSize(ISerializationContext context, GridSize semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__H) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__H));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__L) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__L));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGridSizeAccess().getHINTTerminalRuleCall_1_0(), semanticObject.getH());
		feeder.accept(grammarAccess.getGridSizeAccess().getLINTTerminalRuleCall_3_0(), semanticObject.getL());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StartGrid returns StartGrid
	 *
	 * Constraint:
	 *     (xC=INT yC=INT s=Status)
	 * </pre>
	 */
	protected void sequence_StartGrid(ISerializationContext context, StartGrid semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.START_GRİD__XC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.START_GRİD__XC));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.START_GRİD__YC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.START_GRİD__YC));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.START_GRİD__S) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.START_GRİD__S));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStartGridAccess().getXCINTTerminalRuleCall_2_0(), semanticObject.getXC());
		feeder.accept(grammarAccess.getStartGridAccess().getYCINTTerminalRuleCall_4_0(), semanticObject.getYC());
		feeder.accept(grammarAccess.getStartGridAccess().getSStatusEnumRuleCall_6_0(), semanticObject.getS());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     evolutionRules returns evolutionRules
	 *
	 * Constraint:
	 *     (nNo=INT l=logicalRelation comparedNo=INT s=Status result=Result)
	 * </pre>
	 */
	protected void sequence_evolutionRules(ISerializationContext context, evolutionRules semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__NNO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__NNO));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__L) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__L));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__COMPARED_NO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__COMPARED_NO));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__S) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__S));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__RESULT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__RESULT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvolutionRulesAccess().getNNoINTTerminalRuleCall_2_0(), semanticObject.getNNo());
		feeder.accept(grammarAccess.getEvolutionRulesAccess().getLLogicalRelationEnumRuleCall_3_0(), semanticObject.getL());
		feeder.accept(grammarAccess.getEvolutionRulesAccess().getComparedNoINTTerminalRuleCall_4_0(), semanticObject.getComparedNo());
		feeder.accept(grammarAccess.getEvolutionRulesAccess().getSStatusEnumRuleCall_7_0(), semanticObject.getS());
		feeder.accept(grammarAccess.getEvolutionRulesAccess().getResultResultEnumRuleCall_9_0(), semanticObject.getResult());
		feeder.finish();
	}
	
	
}
