/*
 * generated by Xtext 2.28.0
 */
package game.of.life.tasks.serializer;

import com.google.inject.Inject;
import game.of.life.tasks.services.TASKDSLGrammarAccess;
import game.of.life.tasks.tASKDSL.AndExpression;
import game.of.life.tasks.tASKDSL.Cell;
import game.of.life.tasks.tASKDSL.ComparisonExpression;
import game.of.life.tasks.tASKDSL.Game;
import game.of.life.tasks.tASKDSL.GameStatus;
import game.of.life.tasks.tASKDSL.GridSize;
import game.of.life.tasks.tASKDSL.Literal;
import game.of.life.tasks.tASKDSL.OrExpression;
import game.of.life.tasks.tASKDSL.StartGrid;
import game.of.life.tasks.tASKDSL.TASKDSLPackage;
import game.of.life.tasks.tASKDSL.evolutionRules;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TASKDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TASKDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TASKDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TASKDSLPackage.AND_EXPRESSİON:
				sequence_AndExpression(context, (AndExpression) semanticObject); 
				return; 
			case TASKDSLPackage.CELL:
				sequence_Cell(context, (Cell) semanticObject); 
				return; 
			case TASKDSLPackage.COMPARİSON_EXPRESSİON:
				sequence_ComparisonExpression(context, (ComparisonExpression) semanticObject); 
				return; 
			case TASKDSLPackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case TASKDSLPackage.GAME_STATUS:
				sequence_GameStatus(context, (GameStatus) semanticObject); 
				return; 
			case TASKDSLPackage.GRİD_SİZE:
				sequence_GridSize(context, (GridSize) semanticObject); 
				return; 
			case TASKDSLPackage.LİTERAL:
				sequence_Literal(context, (Literal) semanticObject); 
				return; 
			case TASKDSLPackage.OR_EXPRESSİON:
				sequence_OrExpression(context, (OrExpression) semanticObject); 
				return; 
			case TASKDSLPackage.START_GRİD:
				sequence_StartGrid(context, (StartGrid) semanticObject); 
				return; 
			case TASKDSLPackage.EVOLUTİON_RULES:
				sequence_evolutionRules(context, (evolutionRules) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns AndExpression
	 *     OrExpression returns AndExpression
	 *     OrExpression.OrExpression_1_0 returns AndExpression
	 *     AndExpression returns AndExpression
	 *     AndExpression.AndExpression_1_0 returns AndExpression
	 *     ComparisonExpression returns AndExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns AndExpression
	 *     PrimaryExpression returns AndExpression
	 *
	 * Constraint:
	 *     (left=AndExpression_AndExpression_1_0 right=ComparisonExpression)
	 * </pre>
	 */
	protected void sequence_AndExpression(ISerializationContext context, AndExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.AND_EXPRESSİON__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.AND_EXPRESSİON__LEFT));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.AND_EXPRESSİON__RİGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.AND_EXPRESSİON__RİGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Cell returns Cell
	 *
	 * Constraint:
	 *     (x=INT y=INT nNo=INT (s='Live' | s='Dead') (a='Birth' | a='OverCrowd' | a='xisolate' | a='Survive'))
	 * </pre>
	 */
	protected void sequence_Cell(ISerializationContext context, Cell semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns ComparisonExpression
	 *     OrExpression returns ComparisonExpression
	 *     OrExpression.OrExpression_1_0 returns ComparisonExpression
	 *     AndExpression returns ComparisonExpression
	 *     AndExpression.AndExpression_1_0 returns ComparisonExpression
	 *     ComparisonExpression returns ComparisonExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns ComparisonExpression
	 *     PrimaryExpression returns ComparisonExpression
	 *
	 * Constraint:
	 *     (
	 *         left=ComparisonExpression_ComparisonExpression_1_0 
	 *         (operator='&lt;' | operator='&lt;=' | operator='==' | operator='&gt;=' | operator='&gt;') 
	 *         right=PrimaryExpression
	 *     )
	 * </pre>
	 */
	protected void sequence_ComparisonExpression(ISerializationContext context, ComparisonExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GameStatus returns GameStatus
	 *
	 * Constraint:
	 *     (so='Continue' | so='Over')
	 * </pre>
	 */
	protected void sequence_GameStatus(ISerializationContext context, GameStatus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Game
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         gameStatus+=GameStatus 
	 *         gridSize+=GridSize 
	 *         evolutionRules+=evolutionRules* 
	 *         startGrid+=StartGrid* 
	 *         allCells+=Cell*
	 *     )
	 * </pre>
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GridSize returns GridSize
	 *
	 * Constraint:
	 *     (h=INT l=INT)
	 * </pre>
	 */
	protected void sequence_GridSize(ISerializationContext context, GridSize semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__H) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__H));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__L) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__L));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGridSizeAccess().getHINTTerminalRuleCall_1_0(), semanticObject.getH());
		feeder.accept(grammarAccess.getGridSizeAccess().getLINTTerminalRuleCall_3_0(), semanticObject.getL());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns Literal
	 *     OrExpression returns Literal
	 *     OrExpression.OrExpression_1_0 returns Literal
	 *     AndExpression returns Literal
	 *     AndExpression.AndExpression_1_0 returns Literal
	 *     ComparisonExpression returns Literal
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Literal
	 *     PrimaryExpression returns Literal
	 *     Literal returns Literal
	 *
	 * Constraint:
	 *     value='true'
	 * </pre>
	 */
	protected void sequence_Literal(ISerializationContext context, Literal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.LİTERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.LİTERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralAccess().getValueTrueKeyword_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns OrExpression
	 *     OrExpression returns OrExpression
	 *     OrExpression.OrExpression_1_0 returns OrExpression
	 *     AndExpression returns OrExpression
	 *     AndExpression.AndExpression_1_0 returns OrExpression
	 *     ComparisonExpression returns OrExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns OrExpression
	 *     PrimaryExpression returns OrExpression
	 *
	 * Constraint:
	 *     (left=OrExpression_OrExpression_1_0 right=AndExpression)
	 * </pre>
	 */
	protected void sequence_OrExpression(ISerializationContext context, OrExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.OR_EXPRESSİON__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.OR_EXPRESSİON__LEFT));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.OR_EXPRESSİON__RİGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.OR_EXPRESSİON__RİGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StartGrid returns StartGrid
	 *
	 * Constraint:
	 *     (xC=INT yC=INT nNo=INT s='Live' (a='Birth' | a='OverCrowd' | a='xisolate' | a='Survive'))
	 * </pre>
	 */
	protected void sequence_StartGrid(ISerializationContext context, StartGrid semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     evolutionRules returns evolutionRules
	 *
	 * Constraint:
	 *     bool=Expression
	 * </pre>
	 */
	protected void sequence_evolutionRules(ISerializationContext context, evolutionRules semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__BOOL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.EVOLUTİON_RULES__BOOL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvolutionRulesAccess().getBoolExpressionParserRuleCall_1_0(), semanticObject.getBool());
		feeder.finish();
	}
	
	
}
