/*
 * generated by Xtext 2.28.0
 */
package game.of.life.tasks.serializer;

import com.google.inject.Inject;
import game.of.life.tasks.services.TASKDSLGrammarAccess;
import game.of.life.tasks.tASKDSL.Cell;
import game.of.life.tasks.tASKDSL.Game;
import game.of.life.tasks.tASKDSL.GameStatus;
import game.of.life.tasks.tASKDSL.GridSize;
import game.of.life.tasks.tASKDSL.StartGrid;
import game.of.life.tasks.tASKDSL.TASKDSLPackage;
import game.of.life.tasks.tASKDSL.avAction;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TASKDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TASKDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TASKDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TASKDSLPackage.CELL:
				sequence_Cell(context, (Cell) semanticObject); 
				return; 
			case TASKDSLPackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case TASKDSLPackage.GAME_STATUS:
				sequence_GameStatus(context, (GameStatus) semanticObject); 
				return; 
			case TASKDSLPackage.GRİD_SİZE:
				sequence_GridSize(context, (GridSize) semanticObject); 
				return; 
			case TASKDSLPackage.START_GRİD:
				sequence_StartGrid(context, (StartGrid) semanticObject); 
				return; 
			case TASKDSLPackage.AV_ACTİON:
				sequence_avAction(context, (avAction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Cell returns Cell
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         x=INT 
	 *         y=INT 
	 *         nNo=INT 
	 *         s=INT 
	 *         avAction=avAction
	 *     )
	 * </pre>
	 */
	protected void sequence_Cell(ISerializationContext context, Cell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.CELL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.CELL__NAME));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.CELL__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.CELL__X));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.CELL__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.CELL__Y));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.CELL__NNO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.CELL__NNO));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.CELL__S) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.CELL__S));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.CELL__AV_ACTİON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.CELL__AV_ACTİON));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCellAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCellAccess().getXINTTerminalRuleCall_3_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getCellAccess().getYINTTerminalRuleCall_5_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getCellAccess().getNNoINTTerminalRuleCall_7_0(), semanticObject.getNNo());
		feeder.accept(grammarAccess.getCellAccess().getSINTTerminalRuleCall_9_0(), semanticObject.getS());
		feeder.accept(grammarAccess.getCellAccess().getAvActionAvActionParserRuleCall_11_0(), semanticObject.getAvAction());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GameStatus returns GameStatus
	 *
	 * Constraint:
	 *     gs=INT
	 * </pre>
	 */
	protected void sequence_GameStatus(ISerializationContext context, GameStatus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.GAME_STATUS__GS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.GAME_STATUS__GS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGameStatusAccess().getGsINTTerminalRuleCall_1_0(), semanticObject.getGs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Game
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (name=ID gameStatus+=GameStatus gridSize+=GridSize (startGrid+=StartGrid | allCells+=Cell)*)
	 * </pre>
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GridSize returns GridSize
	 *
	 * Constraint:
	 *     (h=INT l=INT)
	 * </pre>
	 */
	protected void sequence_GridSize(ISerializationContext context, GridSize semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__H) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__H));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__L) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.GRİD_SİZE__L));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGridSizeAccess().getHINTTerminalRuleCall_1_0(), semanticObject.getH());
		feeder.accept(grammarAccess.getGridSizeAccess().getLINTTerminalRuleCall_3_0(), semanticObject.getL());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StartGrid returns StartGrid
	 *
	 * Constraint:
	 *     (xC=INT yC=INT)
	 * </pre>
	 */
	protected void sequence_StartGrid(ISerializationContext context, StartGrid semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.START_GRİD__XC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.START_GRİD__XC));
			if (transientValues.isValueTransient(semanticObject, TASKDSLPackage.Literals.START_GRİD__YC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TASKDSLPackage.Literals.START_GRİD__YC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStartGridAccess().getXCINTTerminalRuleCall_2_0(), semanticObject.getXC());
		feeder.accept(grammarAccess.getStartGridAccess().getYCINTTerminalRuleCall_4_0(), semanticObject.getYC());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     avAction returns avAction
	 *
	 * Constraint:
	 *     (birth=INT | overcrowd=INT | xiso=INT | sur=INT)
	 * </pre>
	 */
	protected void sequence_avAction(ISerializationContext context, avAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
