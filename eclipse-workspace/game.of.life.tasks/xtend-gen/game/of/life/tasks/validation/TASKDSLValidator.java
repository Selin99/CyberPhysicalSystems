/**
 * generated by Xtext 2.28.0
 */
package game.of.life.tasks.validation;

import game.of.life.tasks.tASKDSL.Cell;
import game.of.life.tasks.tASKDSL.Game;
import game.of.life.tasks.tASKDSL.GridSize;
import game.of.life.tasks.tASKDSL.StartGrid;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class TASKDSLValidator extends AbstractTASKDSLValidator {
  @Check
  public void checkStartGridCoordinates(final Game g) {
    EList<GridSize> gs = g.getGridSize();
    EList<StartGrid> sg = g.getStartGrid();
    for (int i = 0; (i < sg.size()); i++) {
      {
        int height = gs.get(0).getH();
        int length = gs.get(0).getL();
        if (((sg.get(i).getXC() >= height) || (sg.get(i).getXC() < 0))) {
          this.error("X axis out of grid", null);
        }
        if (((sg.get(i).getYC() >= length) || (sg.get(i).getYC() < 0))) {
          this.error("Y axis out of grid", null);
        }
      }
    }
  }

  @Check
  public void checkCellCoordinates(final Game g) {
    EList<GridSize> gs = g.getGridSize();
    EList<Cell> c = g.getAllCells();
    for (int i = 0; (i < gs.size()); i++) {
      {
        int height = gs.get(i).getH();
        int length = gs.get(i).getL();
        for (int j = 0; (i < c.size()); i++) {
          {
            if (((c.get(i).getX() > height) || (c.get(i).getX() < 0))) {
              this.error("X axis out of grid", null);
            }
            if (((c.get(i).getY() > length) || (c.get(i).getY() < 0))) {
              this.error("Y axis out of grid", null);
            }
          }
        }
      }
    }
  }

  @Check
  public void checkCellStatus(final Game g) {
    EList<Cell> c = g.getAllCells();
    for (int i = 0; (i < c.size()); i++) {
      {
        if (((c.get(i).getNNo() == 3) && (c.get(i).getS() == 0))) {
          int _birth = c.get(i).getAvAction().getBirth();
          boolean _notEquals = (_birth != 1);
          if (_notEquals) {
            this.error("Item\'s next available action is birth!", null);
          }
          int _overcrowd = c.get(i).getAvAction().getOvercrowd();
          boolean _equals = (_overcrowd == 1);
          if (_equals) {
            this.error("Death by Overcrowing is not available for this item ! Try changing to birth!", null);
          }
          int _sur = c.get(i).getAvAction().getSur();
          boolean _equals_1 = (_sur == 1);
          if (_equals_1) {
            this.error("Survival is not available for this item ! Try changing to birth!", null);
          }
          int _xiso = c.get(i).getAvAction().getXiso();
          boolean _equals_2 = (_xiso == 1);
          if (_equals_2) {
            this.error("Death by Isolation is not available for this item ! Try changing to birth!", null);
          }
        }
        if (((c.get(i).getNNo() < 2) && (c.get(i).getS() == 1))) {
          int _xiso_1 = c.get(i).getAvAction().getXiso();
          boolean _notEquals_1 = (_xiso_1 != 1);
          if (_notEquals_1) {
            this.error("Item\'s next available action is death by isolation!", null);
          }
          int _overcrowd_1 = c.get(i).getAvAction().getOvercrowd();
          boolean _equals_3 = (_overcrowd_1 == 1);
          if (_equals_3) {
            this.error("Death by Overcrowing is not available for this item ! Try changing to death by isolation!", null);
          }
          int _sur_1 = c.get(i).getAvAction().getSur();
          boolean _equals_4 = (_sur_1 == 1);
          if (_equals_4) {
            this.error("Survival is not available for this item ! Try changing to death by isolation!", null);
          }
          int _birth_1 = c.get(i).getAvAction().getBirth();
          boolean _equals_5 = (_birth_1 == 1);
          if (_equals_5) {
            this.error("Birth is not available for this item ! Try changing to death by isolation!", null);
          }
        }
        if (((c.get(i).getNNo() > 3) && (c.get(i).getS() == 1))) {
          int _overcrowd_2 = c.get(i).getAvAction().getOvercrowd();
          boolean _notEquals_2 = (_overcrowd_2 != 1);
          if (_notEquals_2) {
            this.error("Item\'s next available action is death by overcrowding!", null);
          }
          int _xiso_2 = c.get(i).getAvAction().getXiso();
          boolean _equals_6 = (_xiso_2 == 1);
          if (_equals_6) {
            this.error("Death by isolation is not available for this item ! Try changing to death by overcrowding!", null);
          }
          int _sur_2 = c.get(i).getAvAction().getSur();
          boolean _equals_7 = (_sur_2 == 1);
          if (_equals_7) {
            this.error("Survival is not available for this item ! Try changing to death by overcrowding!", null);
          }
          int _birth_2 = c.get(i).getAvAction().getBirth();
          boolean _equals_8 = (_birth_2 == 1);
          if (_equals_8) {
            this.error("Birth is not available for this item ! Try changing to death by overcrowding!", null);
          }
        }
        if (((c.get(i).getNNo() == 2) || ((c.get(i).getNNo() == 3) && (c.get(i).getS() == 1)))) {
          int _sur_3 = c.get(i).getAvAction().getSur();
          boolean _notEquals_3 = (_sur_3 != 1);
          if (_notEquals_3) {
            this.error("Item\'s next available action is survival!", null);
          }
          int _xiso_3 = c.get(i).getAvAction().getXiso();
          boolean _equals_9 = (_xiso_3 == 1);
          if (_equals_9) {
            this.error("Death by isolation is not available for this item ! Try changing to survival!", null);
          }
          int _overcrowd_3 = c.get(i).getAvAction().getOvercrowd();
          boolean _equals_10 = (_overcrowd_3 == 1);
          if (_equals_10) {
            this.error("Death by overcrowding is not available for this item ! Try changing to survival!", null);
          }
          int _birth_3 = c.get(i).getAvAction().getBirth();
          boolean _equals_11 = (_birth_3 == 1);
          if (_equals_11) {
            this.error("Birth is not available for this item ! Try changing to survival!", null);
          }
        }
      }
    }
  }

  @Check
  public void checkDoubleCoordinates(final Game g) {
    EList<Cell> clist = g.getAllCells();
    for (int i = 0; (i < clist.size()); i++) {
      for (int j = (i + 1); (j < clist.size()); j++) {
        if ((Integer.valueOf(clist.get(i).getX()).equals(Integer.valueOf(clist.get(j).getX())) && Integer.valueOf(clist.get(i).getY()).equals(Integer.valueOf(clist.get(j).getY())))) {
          this.error("Duplicated Coordinate!!", null);
        }
      }
    }
  }
}
