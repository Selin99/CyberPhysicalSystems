package game.of.life.tasks.generator;

import com.google.common.base.Objects;
import game.of.life.tasks.tASKDSL.Cell;
import game.of.life.tasks.tASKDSL.Game;
import game.of.life.tasks.tASKDSL.Status;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class GameOfLife {
  public static CharSequence gameOfLife(final Game root) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.append("package GameOfLife;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import java.awt.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import java.awt.event.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import java.net.URI;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import java.util.ConcurrentModificationException;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* Conway\'s game of life is a cellular automaton devised by the");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* mathematician John Conway.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public class GameOfLife extends JFrame implements ActionListener {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private static final Dimension DEFAULT_WINDOW_SIZE = new Dimension(800, 600);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private static final Dimension MINIMUM_WINDOW_SIZE = new Dimension(400, 400);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private static final int BLOCK_SIZE = 10;");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private JMenuBar mb_menu;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private JMenu m_file, m_game, m_help;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private JMenuItem mi_file_options, mi_file_exit;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private JMenuItem mi_game_autofill, mi_game_play, mi_game_stop, mi_game_reset;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private JMenuItem mi_help_about, mi_help_source;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private int i_movesPerSecond = 3;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private GameBoard gb_gameBoard;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private Thread game;");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("// Setup the swing specifics");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("JFrame game = new GameOfLife();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("game.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("game.setTitle(\"Conway\'s Game of Life\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("//game.setIconImage(new ImageIcon(ConwaysGameOfLife.class.getResource(\"/images/logo.png\")).getImage());");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("game.setSize(DEFAULT_WINDOW_SIZE);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("game.setMinimumSize(MINIMUM_WINDOW_SIZE);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("game.setLocation((Toolkit.getDefaultToolkit().getScreenSize().width - game.getWidth())/2, ");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("(Toolkit.getDefaultToolkit().getScreenSize().height - game.getHeight())/2);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("game.setVisible(true);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public GameOfLife() {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("// Setup menu");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mb_menu = new JMenuBar();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("setJMenuBar(mb_menu);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_file = new JMenu(\"File\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mb_menu.add(m_file);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_game = new JMenu(\"Game\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mb_menu.add(m_game);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_help = new JMenu(\"Help\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mb_menu.add(m_help);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_file_options = new JMenuItem(\"Options\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_file_options.addActionListener(this);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_file_exit = new JMenuItem(\"Exit\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_file_exit.addActionListener(this);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_file.add(mi_file_options);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_file.add(new JSeparator());");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_file.add(mi_file_exit);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_game_autofill = new JMenuItem(\"Autofill\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_game_autofill.addActionListener(this);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_game_play = new JMenuItem(\"Play\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_game_play.addActionListener(this);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_game_stop = new JMenuItem(\"Stop\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_game_stop.setEnabled(false);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_game_stop.addActionListener(this);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_game_reset = new JMenuItem(\"Reset\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_game_reset.addActionListener(this);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_game.add(mi_game_autofill);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_game.add(new JSeparator());");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_game.add(mi_game_play);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_game.add(mi_game_stop);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_game.add(mi_game_reset);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_help_about = new JMenuItem(\"About\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_help_about.addActionListener(this);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_help_source = new JMenuItem(\"Source\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mi_help_source.addActionListener(this);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_help.add(mi_help_about);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("m_help.add(mi_help_source);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("// Setup game board");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("gb_gameBoard = new GameBoard();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("add(gb_gameBoard);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public void setGameBeingPlayed(boolean isBeingPlayed) {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("if (isBeingPlayed) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("mi_game_play.setEnabled(false);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("mi_game_stop.setEnabled(true);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("game = new Thread(gb_gameBoard);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("game.start();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("mi_game_play.setEnabled(true);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("mi_game_stop.setEnabled(false);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("game.interrupt();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public void actionPerformed(ActionEvent ae) {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("if (ae.getSource().equals(mi_file_exit)) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("// Exit the game");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("System.exit(0);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("} else if (ae.getSource().equals(mi_file_options)) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("// Put up an options panel to change the number of moves per second");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("final JFrame f_options = new JFrame();");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("f_options.setTitle(\"Options\");");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("f_options.setSize(300,60);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("f_options.setLocation((Toolkit.getDefaultToolkit().getScreenSize().width - f_options.getWidth())/2, ");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("(Toolkit.getDefaultToolkit().getScreenSize().height - f_options.getHeight())/2);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("f_options.setResizable(false);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("JPanel p_options = new JPanel();");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("p_options.setOpaque(false);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("f_options.add(p_options);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("p_options.add(new JLabel(\"Number of moves per second:\"));");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("Integer[] secondOptions = {1,2,3,4,5,10,15,20};");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("final JComboBox cb_seconds = new JComboBox(secondOptions);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("p_options.add(cb_seconds);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("cb_seconds.setSelectedItem(i_movesPerSecond);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("cb_seconds.addActionListener(new ActionListener(){");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("public void actionPerformed(ActionEvent ae) {");
    _builder.newLine();
    _builder.append("\t\t                    ");
    _builder.append("i_movesPerSecond = (Integer)cb_seconds.getSelectedItem();");
    _builder.newLine();
    _builder.append("\t\t                    ");
    _builder.append("f_options.dispose();");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("f_options.setVisible(true);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("} else if (ae.getSource().equals(mi_game_autofill)) {");
    _builder.newLine();
    _builder.append("\t\t           ");
    _builder.append("gb_gameBoard.resetBoard();");
    _builder.newLine();
    _builder.append("\t\t           ");
    _builder.append("gb_gameBoard.randomlyFillBoard(0);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("} else if (ae.getSource().equals(mi_game_reset)) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("gb_gameBoard.resetBoard();");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("gb_gameBoard.repaint();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("} else if (ae.getSource().equals(mi_game_play)) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("setGameBeingPlayed(true);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("} else if (ae.getSource().equals(mi_game_stop)) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("setGameBeingPlayed(false);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("} else if (ae.getSource().equals(mi_help_source)) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("desktop.browse(new URI(\"https://github.com/Burke9077/Conway-s-Game-of-Life\"));");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("} catch (Exception ex) {");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("JOptionPane.showMessageDialog(null, \"Source is available on GitHub at:\\nhttps://github.com/Burke9077/Conway-s-Game-of-Life\", \"Source\", JOptionPane.INFORMATION_MESSAGE);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("} else if (ae.getSource().equals(mi_help_about)) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("JOptionPane.showMessageDialog(null, \"Conway\'s game of life was a cellular animation devised by the mathematician John Conway.\\nThis Java, swing based implementation was created by Matthew Burke.\\n\\nhttp://burke9077.com\\nBurke9077@gmail.com\\n@burke9077\\n\\nCreative Commons Attribution 4.0 International\");");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private class GameBoard extends JPanel implements ComponentListener, MouseListener, MouseMotionListener, Runnable {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("private Dimension d_gameBoardSize = new Dimension(75, 50);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("private ArrayList<Point> point = new ArrayList<Point>(0);");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public GameBoard() {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("// Add resizing listener");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("addComponentListener(this);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("addMouseListener(this);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("addMouseMotionListener(this);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("private void updateArraySize() {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("ArrayList<Point> removeList = new ArrayList<Point>(0);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("for (Point current : point) {");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("if ((current.x > d_gameBoardSize.width-1) || (current.y > d_gameBoardSize.height-1)) {");
    _builder.newLine();
    _builder.append("\t\t                    ");
    _builder.append("removeList.add(current);");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("point.removeAll(removeList);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("repaint();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void addPoint(int x, int y) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("if (!point.contains(new Point(x,y))) {");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("point.add(new Point(x,y));");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("repaint();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void addPoint(MouseEvent me) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("int x = me.getPoint().x/10-1;");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("int y = me.getPoint().y/10-1;");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("if ((x >= 0) && (x < d_gameBoardSize.width) && (y >= 0) && (y < d_gameBoardSize.height)) {");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("addPoint(x,y);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void removePoint(int x, int y) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("point.remove(new Point(x,y));");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void resetBoard() {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("point.clear();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void randomlyFillBoard(int percent) {    \t\t        \t");
    _builder.newLine();
    {
      EList<Cell> _allCells = root.getAllCells();
      for(final Cell cells : _allCells) {
        _builder.append("\t\t            ");
        CharSequence _updateGrid = GameOfLife.updateGrid(cells.getS());
        _builder.append(_updateGrid, "\t\t            ");
        _builder.append("(");
        int _xC = cells.getXC();
        _builder.append(_xC, "\t\t            ");
        _builder.append(",");
        int _yC = cells.getYC();
        _builder.append(_yC, "\t\t            ");
        _builder.append(");\t \t\t\t        \t\t\t                \t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void paintComponent(Graphics g) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("super.paintComponent(g);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("for (Point newPoint : point) {");
    _builder.newLine();
    _builder.append("\t\t                    ");
    _builder.append("// Draw new point");
    _builder.newLine();
    _builder.append("\t\t                    ");
    _builder.append("g.setColor(Color.blue);");
    _builder.newLine();
    _builder.append("\t\t                    ");
    _builder.append("g.fillRect(BLOCK_SIZE + (BLOCK_SIZE*newPoint.x), BLOCK_SIZE + (BLOCK_SIZE*newPoint.y), BLOCK_SIZE, BLOCK_SIZE);");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("} catch (ConcurrentModificationException cme) {}");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("// Setup grid");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("g.setColor(Color.BLACK);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("for (int i=0; i<=d_gameBoardSize.width; i++) {");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("g.drawLine(((i*BLOCK_SIZE)+BLOCK_SIZE), BLOCK_SIZE, (i*BLOCK_SIZE)+BLOCK_SIZE, BLOCK_SIZE + (BLOCK_SIZE*d_gameBoardSize.height));");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("for (int i=0; i<=d_gameBoardSize.height; i++) {");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("g.drawLine(BLOCK_SIZE, ((i*BLOCK_SIZE)+BLOCK_SIZE), BLOCK_SIZE*(d_gameBoardSize.width+1), ((i*BLOCK_SIZE)+BLOCK_SIZE));");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void componentResized(ComponentEvent e) {}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void componentMoved(ComponentEvent e) {}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void componentShown(ComponentEvent e) {}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void componentHidden(ComponentEvent e) {}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void mouseClicked(MouseEvent e) {}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void mousePressed(MouseEvent e) {}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void mouseReleased(MouseEvent e) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("// Mouse was released (user clicked)");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("addPoint(e);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void mouseEntered(MouseEvent e) {}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void mouseExited(MouseEvent e) {}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void mouseDragged(MouseEvent e) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("// Mouse is being dragged, user wants multiple selections");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("addPoint(e);");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void mouseMoved(MouseEvent e) {}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("boolean[][] gameBoard = new boolean[d_gameBoardSize.width+2][d_gameBoardSize.height+2];");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("for (Point current : point) {");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("gameBoard[current.x+1][current.y+1] = true;");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("ArrayList<Point> survivingCells = new ArrayList<Point>(0);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("// Iterate through the array, follow game of life rules");
    _builder.newLine();
    _builder.append("\t\t           ");
    _builder.append("// RulesOfLifeOrig.computeSurvivors(gameBoard,survivingCells);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("RulesOfLife.computeSurvivors(gameBoard,survivingCells);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("resetBoard();");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("point.addAll(survivingCells);");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("repaint();");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("Thread.sleep(1000/i_movesPerSecond);");
    _builder.newLine();
    _builder.append("\t\t                ");
    _builder.append("run();");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("} catch (InterruptedException ex) {}");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence updateGrid(final Status s) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equals = Objects.equal(s, Status.LIVE);
      if (_equals) {
        _builder.append("addPoint");
        _builder.newLine();
      } else {
        _builder.append("removePoint");
        _builder.newLine();
      }
    }
    return _builder;
  }
}
